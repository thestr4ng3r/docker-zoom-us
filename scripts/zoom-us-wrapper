#!/bin/bash

ZOOM_US_USER=zoom
ZOOM_CONFIG_PREFIX=${HOME}/.local/share/zoom
IMAGE_TAG=zoom

USER_UID=$(id -u)
USER_GID=$(id -g)

XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.docker.xauth

DOWNLOAD_DIR=$(xdg-user-dir DOWNLOAD)
if [ -z "${DOWNLOAD_DIR}" ]; then
    DOWNLOAD_DIR="${HOME}/Downloads"
fi;

cleanup_stopped_zoom_us_instances(){
  echo "Cleaning up stopped zoom-us instances..."
  for c in $(${SUDO} docker ps -a -q)
  do
    image="$(${SUDO} docker inspect -f {{.Config.Image}} ${c})"
    if [ "${image}" == "$IMAGE_TAG" ]; then
      running=$(${SUDO} docker inspect -f {{.State.Running}} ${c})
      if [ "${running}" != "true" ]; then
        ${SUDO} docker rm "${c}" >/dev/null
      fi
    fi
  done
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=USER_UID=${USER_UID}"
  ENV_VARS+=" --env=USER_GID=${USER_GID}"
  ENV_VARS+=" --env=DISPLAY=unix$DISPLAY"
  ENV_VARS+=" --env=XAUTHORITY=${XAUTH}"
  ENV_VARS+=" --env=TZ=$(date +%Z)"
}

prepare_docker_volume_parameters() {
  touch ${XAUTH}
  xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f ${XAUTH} nmerge -

  VOLUMES+=" --volume=${ZOOM_CONFIG_PREFIX}/.config:/home/${ZOOM_US_USER}/.config"
  VOLUMES+=" --volume=${ZOOM_CONFIG_PREFIX}/.zoom:/home/${ZOOM_US_USER}/.zoom"
  VOLUMES+=" --volume=${XSOCK}:${XSOCK}"
  VOLUMES+=" --volume=${XAUTH}:${XAUTH}"
}

prepare_docker_device_parameters() {
  # enumerate video devices for webcam support
  VIDEO_DEVICES=
  for device in /dev/video*
  do
    if [ -c $device ]; then
      VIDEO_DEVICES="${VIDEO_DEVICES} --device $device:$device"
    fi
  done
}

cleanup_stopped_zoom_us_instances
prepare_docker_env_parameters
prepare_docker_volume_parameters
prepare_docker_device_parameters

DOCKERID=${RANDOM}
pasocket=$(pactl load-module module-native-protocol-unix socket=$HOME/.config/pulse/docker-socket$DOCKERID auth-anonymous=1)

docker run -it \
  ${ENV_VARS} \
  ${VIDEO_DEVICES} \
  --device /dev/dri \
  ${VOLUMES} \
  -v $HOME/.config/pulse/docker-socket$DOCKERID:/home/$ZOOM_US_USER/.pulse.socket \
  ${ZOOM_EXTRA_DOCKER_ARGUMENTS} \
  "$IMAGE_TAG" "$@"

pactl unload-module $pasocket
rm -rf $HOME/.config/pulse/docker-socket$DOCKERID
